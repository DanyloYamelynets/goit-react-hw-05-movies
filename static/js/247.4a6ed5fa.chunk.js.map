{"version":3,"file":"static/js/247.4a6ed5fa.chunk.js","mappings":"qSAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAqB,mCAAG,sGACZL,EAASM,IAAI,uBADD,uBAC3BC,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qDAIrBC,EAAmB,mCAAG,WAAMC,GAAN,yFACVT,EAASM,IAAT,gBAA8B,CACnDH,OAAQ,CACNO,MAAOD,KAHsB,uBACzBF,EADyB,EACzBA,KADyB,kBAM1BA,GAN0B,2CAAH,sDAQnBI,EAAmB,mCAAG,WAAMC,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,IADb,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAInBM,EAAmB,mCAAG,WAAMD,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,EAAvB,aADU,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAInBO,EAAmB,mCAAG,WAAMF,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,EAAvB,aADU,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,qD,iHC6BhC,UArDa,WACX,OAAkCQ,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,2FACrBN,GAAa,GADQ,mBAGKN,EAAAA,EAAAA,IAAoBS,GAHzB,OAGbN,EAHa,OAInBC,EAAaD,GAJM,gDAMnBK,EAAS,KAAMK,SANI,yBAQnBP,GAAa,GARM,4EAAH,qDAYpBM,GACD,GAAE,CAACH,IAGFN,IACE,0BACGA,EAAUW,KAAKC,KAAI,gBAAGC,EAAH,EAAGA,UAAWP,EAAd,EAAcA,GAAIQ,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OAClB,2BACE,gBACEC,IACED,EAAY,0CAC2BA,GACnC,iGAENE,IAAKH,EACLI,MAAM,KACNC,OAAO,SAET,4BACE,uBAAIL,KACJ,yBAAG,cAAYD,UAbVP,EADS,IAkBnBJ,IACC,0BACE,SAAC,IAAD,MAGHE,IAAS,2BAAK,UAAQA,OAI9B,C","sources":["Api/Api.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'fce4697c079fffcd8ee7621b4b30c3c1',\n  },\n});\n\nexport const requestTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\nexport const requestSearchMovies = async q => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query: q,\n    },\n  });\n  return data;\n};\nexport const requestMovieDetails = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\nexport const requestMovieCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\nexport const requestMovieReviews = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/reviews`);\n  return data;\n};\n","import { requestMovieCredits } from 'Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      setIsLoading(true);\n      try {\n        const movieCast = await requestMovieCredits(id);\n        setMovieCast(movieCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieCast();\n  }, [id]);\n\n  return (\n    movieCast && (\n      <ul>\n        {movieCast.cast.map(({ character, id, name, profile_path }) => (\n          <li key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  : 'https://st2.depositphotos.com/1898481/6448/i/600/depositphotos_64486573-stock-photo-people.jpg'\n              }\n              alt={name}\n              width=\"70\"\n              height=\"100\"\n            />\n            <div>\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </div>\n          </li>\n        ))}\n        {isLoading && (\n          <div>\n            <Loader />\n          </div>\n        )}\n        {error && <div>Error: {error}</div>}\n      </ul>\n    )\n  );\n};\nexport default Cast;\n"],"names":["instance","axios","baseURL","params","api_key","requestTrendingMovies","get","data","requestSearchMovies","q","query","requestMovieDetails","movieId","requestMovieCredits","requestMovieReviews","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","id","useParams","useEffect","fetchMovieCast","message","cast","map","character","name","profile_path","src","alt","width","height"],"sourceRoot":""}