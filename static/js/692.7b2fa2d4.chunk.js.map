{"version":3,"file":"static/js/692.7b2fa2d4.chunk.js","mappings":"qSAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAqB,mCAAG,sGACZL,EAASM,IAAI,uBADD,uBAC3BC,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qDAIrBC,EAAmB,mCAAG,WAAMC,GAAN,yFACVT,EAASM,IAAT,gBAA8B,CACnDH,OAAQ,CACNO,MAAOD,KAHsB,uBACzBF,EADyB,EACzBA,KADyB,kBAM1BA,GAN0B,2CAAH,sDAQnBI,EAAmB,mCAAG,WAAMC,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,IADb,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAInBM,EAAmB,mCAAG,WAAMD,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,EAAvB,aADU,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAInBO,EAAmB,mCAAG,WAAMF,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,EAAvB,aADU,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,qD,+JCOhC,MAhCA,YAAmC,IAAbQ,EAAY,EAAZA,SACZC,GAAWC,EAAAA,EAAAA,MAEnB,OACE,yBACGF,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAd,OACZ,SAAC,KAAD,CAEEC,GAA0B,YAAtBN,EAASO,SAAT,UAAqCJ,GAArC,iBAAsDA,GAC1DK,MAAO,CAAEC,KAAMT,GAHjB,UAKE,0BACE,0BACGI,EAAM,KAAG,IAAIM,KAAKL,GAAcM,oBANhCR,EAFK,KAenB,ECsCD,EAxDe,WACb,OAAwCS,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAaT,EAAavB,IAAI,UAEpCiC,EAAAA,EAAAA,YAAU,WACR,GAAKD,EAAL,CAEA,IAAME,EAAY,mCAAG,2FACnBL,GAAa,GADM,mBAGK3B,EAAAA,EAAAA,IAAoB8B,GAHzB,OAGXG,EAHW,OAIjBR,EAAUQ,EAAQA,SAJD,gDAMjBJ,EAAS,KAAMK,SANE,yBAQjBP,GAAa,GARI,4EAAH,qDAYlBK,GAduB,CAexB,GAAE,CAACF,IAQJ,OACE,4BACE,0BACE,kBAAMK,SATK,SAAAC,GACfA,EAAEC,iBACF,IAAMC,EAAcF,EAAEG,OAAOC,SAASC,OAAOC,MAC7CpB,EAAgB,CAAEpB,MAAOoC,GAC1B,EAKK,WACE,kBAAOK,KAAK,OAAOC,KAAK,SAASC,UAAQ,KACzC,mBAAQF,KAAK,SAAb,SAAsB,gBAGzBjB,IACC,0BACE,SAACoB,EAAA,EAAD,MAGHlB,IAAS,2BAAK,UAAQA,KACtBJ,EAAOuB,OAAS,IAAK,SAAC,EAAD,CAAYxC,SAAUiB,IACzB,IAAlBA,EAAOuB,SACN,0BACE,uBAAG,wBAKZ,C","sources":["Api/Api.js","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'fce4697c079fffcd8ee7621b4b30c3c1',\n  },\n});\n\nexport const requestTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\nexport const requestSearchMovies = async q => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query: q,\n    },\n  });\n  return data;\n};\nexport const requestMovieDetails = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\nexport const requestMovieCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\nexport const requestMovieReviews = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/reviews`);\n  return data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction MoviesList({ dataList }) {\n    const location = useLocation();\n\n  return (\n    <div>\n      {dataList.map(({ id, title, release_date }) => (\n        <Link\n          key={id}\n          to={location.pathname === '/movies' ? `${id}` : `movies/${id}`}\n          state={{ from: location }}\n        >\n          <div>\n            <h3>\n              {title}, {new Date(release_date).getFullYear()}\n            </h3>\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nMoviesList.propTypes = {\n  dataList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import { requestSearchMovies } from 'Api/Api';\nimport Loader from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const queryValue = searchParams.get('query');\n\n  useEffect(() => {\n    if (!queryValue) return;\n\n    const SearchMovies = async () => {\n      setIsLoading(true);\n      try {\n        const results = await requestSearchMovies(queryValue);\n        setMovies(results.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    SearchMovies();\n  }, [queryValue]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const searchValue = e.target.children.search.value;\n    setSearchParams({ query: searchValue });\n  };\n\n  return (\n    <div>\n      <div>\n        <form onSubmit={onSubmit}>\n          <input type=\"text\" name=\"search\" required />\n          <button type=\"submit\">Search</button>\n        </form>\n      </div>\n      {isLoading && (\n        <div>\n          <Loader />\n        </div>\n      )}\n      {error && <div>Error: {error}</div>}\n      {movies.length > 0 && <MoviesList dataList={movies} />}\n      {movies.length === 0 && (\n        <div>\n          <p>No movies found</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["instance","axios","baseURL","params","api_key","requestTrendingMovies","get","data","requestSearchMovies","q","query","requestMovieDetails","movieId","requestMovieCredits","requestMovieReviews","dataList","location","useLocation","map","id","title","release_date","to","pathname","state","from","Date","getFullYear","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","isLoading","setIsLoading","error","setError","queryValue","useEffect","SearchMovies","results","message","onSubmit","e","preventDefault","searchValue","target","children","search","value","type","name","required","Loader","length"],"sourceRoot":""}